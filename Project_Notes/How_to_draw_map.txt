Cần phải nghĩ về việc làm sao để vẽ background (tạo class background,...) mà ko cần bỏ mỗi thành phần (cây, mây,...) vào các class cho riêng nó (class cây, mây,...)

Cách vẽ background và game object:
1. Vẽ object background trước, object này sẽ là một tilemap
2. Vẽ các game object
3. Vẽ các foreground (những thứ mà có thể che (vẽ chồng lên) được game object)

Tile map editor có thể:
- Thêm được các vùng collision (hình tròn, vuông, chữ nhật, hình bất kì,...)


Cần làm:
1. Load map (phải chia nhỏ công việc ra) (khá khó, bây giờ chỉ cần load một ảnh map lớn, về sau sẽ sửa lại thành tilemap)
- Tìm cách tạo vùng collision dính vào game object: Phải viết code để tạo file xml chứa thông tin về sprite và animation của object hoặc làm bằng tay
- Load background
- Load foreground
- Sắp xếp thứ tự vẽ các layer trong tilemap

2. Va chạm với các object terrain (pipe, brick,...)

3. Hệ thống level cho game object: Mario, Goomba, Koopas, mushroom (power-up: tùy vào level hiện tại của Mario thì sẽ cho ra biến lớn, thêm đuôi,...)

4. Viết logic cho các game object: Mario, ? brick, Goomba, Koopa


5. Nhớ hủy subscription của Lucidchart trước ngày 6/11/2021


Cần phải hiểu rõ kiến trúc của framework và sau đó là cách code chạy như thế nào:
1. Kiến trúc của framework
2. Cách code chạy






Cần làm sau khi hoàn thành Milestone 1:
0. Nghĩ về cách làm sao cho Mario đang ở trạng thái untouchable, di chuyển va chạm với các Game object gây hại cho Mario (Goomba, Koopa,...) cho tới khi hết thời gian untouchable, thì làm sao để có thể cho Mario die khi đã hết thời gian, bởi vì Mario đã va chạm sẵn với Game object gây hại rồi thì làm sao mà phát hiện va chạm với SweptAABB được.
Trả lời: có thể dùng Broad-Phase test giữa Mario và các object ở gần. Nếu thấy phát hiện overlap thì chạy xử lý sự kiện.
 
0.5. Suy nghĩ về việc nên set state cho game object khi ở hàm Update hay hàm OnCollisionWith

1. Thêm code để tùy chỉnh width và height của cửa sổ game trong file mario-sample.txt trong mục SETTINGS

2. Sửa e->ny != 0 thành e->ny < 0 ở hàm OnCollisionWith() của CMario. Do Mario va chạm phía trên platform nên vector normal sẽ là (0, -1) thì mới đúng.

3. Cố gắng nâng cấp hàm Update() của PlayScene (cũng có thể nên update cho những scene khác như Intro, World map khi chọn màng chơi) bằng phân hoạch không gian (Grid, Quad Tree,...)

4. Đổi cái untouchable của Mario từ kiểu int thành bool

5. Sửa những chỗ lấy level ra để so sánh bằng cách dùng tạo thêm hàm GetLevel() để lấy level, phòng trường hợp thay vì so sánh mà lại gán level. (Sửa hết cho toàn bộ các game object)



6. Suy nghĩ về phần xử lý va chạm của mỗi object (đặc biệt là Mario và Koopa), đó là nghĩ về có nên dùng một lệnh "if" và cả đống lệnh "else if", hay là dùng cả 2 lệnh "if" như trong sample code (vừa check object có phải blocking object hay không, vừa check tiếp object có thể collidable được hay không).
Nói chung là suy nghĩ về liệu một object chỉ có thể "hoặc là blocking object hoặc là collidable object", hay một object có thể có cả 2 thứ đó hoặc không có thứ nào cả.

7. Suy nghĩ về khi 2 object va chạm với nhau thì nên xử lý va chạm ở hàm OnCollisionWith của object này hay hàm OnCollisionWith của object kia.

8. Cần phải xem lại vụ phạm vi của thuộc tính và phương thức (hàm) của các game object để nếu sau này chúng có được kế thừa bởi các lớp con, thì còn có thể được dùng hoặc không cho dùng.




Điều cần làm hiện tại:

0. Vẽ hình xem collision trong sample code chạy như thế nào, để có thể làm tiếp các phần có liên quan đến va chạm

0.5. Tạo question brick bằng cách kế thừa class Brick, chỉ thêm animation, xử lý va chạm để sau.

2. Thêm Goomba vào scene_1-1 nhưng dùng animation của Koopa. Xử lý va chạm thì có thể sẽ dễ, vì chỉ cần đọc code phần của Goomba rồi mô phỏng theo






Lưu ý:
1. Khi muốn lấy ra state thì phải dùng hàm GetState khi ở trong file .cpp của game object, vì rất có thể là viết "=" thay vì "==", sẽ dẫn đến thay đổi state của object mà khó có thể nhận ra.
2. Cách để làm một màu biến thành transparent trong GIMP:
-> Mở ảnh bằng Gimp
-> Chuột phải
-> Color
-> Color to Alpha
-> Nhấn vào cái nút "Pick color from the image" ở ngay dòng Color
-> Nhấn chuột trái vào màu muốn chuyển thành màu transparent
-> Chỉnh Opacity threshold thành 0
-> Nhấn Ok để lưu
-> Nhấn File ở thanh menu
-> Chọn Export as
-> Thêm "transparent" vào cuối tên file để biết đây là file đã được chỉnh transparent
-> Export
-> Export
-> Xong



Phát hiện va chạm trong sample code dùng hàm GetBoundingBox để lấy được khung của object, làm vậy để có thể thực hiện việc phát hiện va chạm, nên cần phải chú ý hàm GetBoundingBox của mỗi object nếu gặp hiện tượng lạ hoặc muốn cải thiện phát hiện va chạm bằng cách canh thật chuẩn boundingbox cho các state, level, animation khác nhau của từng object.







