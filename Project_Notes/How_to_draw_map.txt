Cần phải nghĩ về việc làm sao để vẽ background (tạo class background,...) mà ko cần bỏ mỗi thành phần (cây, mây,...) vào các class cho riêng nó (class cây, mây,...)

Cách vẽ background và game object:
1. Vẽ object background trước, object này sẽ là một tilemap
2. Vẽ các game object
3. Vẽ các foreground (những thứ mà có thể che (vẽ chồng lên) được game object)

Tile map editor có thể:
- Thêm được các vùng collision (hình tròn, vuông, chữ nhật, hình bất kì,...)


Cần làm:
1. Load map (phải chia nhỏ công việc ra) (khá khó, bây giờ chỉ cần load một ảnh map lớn, về sau sẽ sửa lại thành tilemap)
- Tìm cách tạo vùng collision dính vào game object: Phải viết code để tạo file xml chứa thông tin về sprite và animation của object hoặc làm bằng tay
- Load background
- Load foreground
- Sắp xếp thứ tự vẽ các layer trong tilemap

2. Va chạm với các object terrain (pipe, brick,...)

3. Hệ thống level cho game object: Mario, Goomba, Koopas, mushroom (power-up: tùy vào level hiện tại của Mario thì sẽ cho ra biến lớn, thêm đuôi,...)

4. Viết logic cho các game object: Mario, ? brick, Goomba, Koopa


5. Nhớ hủy subscription của Lucidchart trước ngày 6/11/2021


Cần phải hiểu rõ kiến trúc của framework và sau đó là cách code chạy như thế nào:
1. Kiến trúc của framework
2. Cách code chạy






Cần làm sau khi hoàn thành Milestone 1:
1. Thêm code để tùy chỉnh width và height của cửa sổ game trong file mario-sample.txt trong mục SETTINGS
2. Sửa e->ny != 0 thành e->ny < 0 ở hàm OnCollisionWith() của CMario. Do Mario va chạm phía trên platform nên vector normal sẽ là (0, -1) thì mới đúng.




Điều cần làm hiện tại:
1. Vẽ sơ đồ mối liên kết giữa các file asset (load game, asset.txt, object, AssetIh.h) của game để có thể nhìn được tổng thể mọi thứ liên quan tới sprite được liên kết ra sao, và cũng để dễ dàng thêm object khi cần.

2. Thêm nốt các big rectangle platform vào file scene_1-1.txt

3. Tạo brick object (có vằn) bằng cách thay sprite cho nó, vẫn sử dụng clas CBrick


